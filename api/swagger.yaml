basePath: /api/v1
consumes:
    - application/json
definitions:
    File:
        properties:
            Data:
                $ref: '#/definitions/File'
            Header:
                $ref: '#/definitions/FileHeader'
        title: File represents an uploaded file.
        type: object
        x-go-package: github.com/go-openapi/swag
    FileHeader:
        properties:
            Filename:
                type: string
            Header:
                $ref: '#/definitions/MIMEHeader'
            Size:
                format: int64
                type: integer
        title: A FileHeader describes a file part of a multipart request.
        type: object
        x-go-package: mime/multipart
    GeneratedChecksResponse:
        properties:
            ids:
                example:
                    - 1
                    - 2
                    - 3
                items:
                    format: int64
                    type: integer
                type: array
                x-go-name: IDs
        type: object
        x-go-package: github.com/pablogolobaro/chequery/internal/handlers/rest/v1/check
    LiveProbeResponse:
        properties:
            message:
                description: The live message
                example: I'm alive
                type: string
                x-go-name: Message
        required:
            - message
        type: object
        x-go-package: github.com/pablogolobaro/chequery/internal/handlers/rest/v1/health
    MIMEHeader:
        additionalProperties:
            items:
                type: string
            type: array
        description: |-
            A MIMEHeader represents a MIME-style header mapping
            keys to sets of values.
        type: object
        x-go-package: net/textproto
    OrderCreateRequest:
        properties:
            order:
                type: string
                x-go-name: Order
        type: object
        x-go-package: github.com/pablogolobaro/chequery/internal/handlers/rest/v1/order
    OrderCreateResponse:
        properties:
            ids:
                example:
                    - 1
                    - 2
                    - 3
                items:
                    format: int64
                    type: integer
                type: array
                x-go-name: Ids
        type: object
        x-go-package: github.com/pablogolobaro/chequery/internal/handlers/rest/v1/order
host: localhost
info:
    contact:
        email: yeu344@gmail.com
        name: Pablo Golobar
    description: |-
        the purpose of this application is to provide an application
        that is generating different pdf checks
    license:
        name: MIT
        url: http://opensource.org/licenses/MIT
    termsOfService: there are no TOS at this moment
    title: CheckGenerating API.
    version: 0.0.1
paths:
    /check:
        put:
            description: This will update status of checks in DB to "printed".
            operationId: updateChecksStatus
            parameters:
                - description: The IDs of a checks set status printed
                  in: query
                  items:
                    type: string
                  name: id
                  required: true
                  type: array
                  x-go-name: IDs
            responses:
                "200":
                    $ref: '#/responses/empty'
                "500":
                    $ref: '#/responses/genericError'
            schemes:
                - http
            summary: Update status of some checks to be printed.
            tags:
                - check
    /check/{check_id}/pdf:
        get:
            consumes:
                - application/json
            description: This will download pdf file of explicit check.
            operationId: getPDF
            parameters:
                - description: The ID of a check
                  in: path
                  name: check_id
                  required: true
                  type: string
                  x-go-name: CheckId
            produces:
                - application/pdf
            responses:
                "200":
                    $ref: '#/responses/PdfFile'
                "500":
                    $ref: '#/responses/genericError'
            schemes:
                - http
            summary: Get pdf file for check.
            tags:
                - check
    /check/generated:
        get:
            description: This will return list of check IDs.
            operationId: getGenerated
            responses:
                "200":
                    $ref: '#/responses/generatedIds'
                "500":
                    $ref: '#/responses/genericError'
            schemes:
                - http
            summary: Get a list of IDs of generated checks.
            tags:
                - check
    /health-check:
        get:
            consumes:
                - application/json
            description: This will ensure that server router is working.
            operationId: liveProbe
            produces:
                - application/pdf
            responses:
                "200":
                    $ref: '#/responses/liveProbeSuccess'
                "500":
                    description: ""
            schemes:
                - http
            summary: Get live probe.
            tags:
                - health
    /order:
        post:
            description: This will create new checks in db and starts generating pdf files from it.
            operationId: createOrder
            parameters:
                - format: int64
                  in: query
                  name: point_id
                  required: true
                  type: integer
                  x-go-name: PointId
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/OrderCreateRequest'
            responses:
                "201":
                    $ref: '#/responses/orderCreateResponse'
                default:
                    $ref: '#/responses/genericError'
            schemes:
                - http
            summary: Create checks from new order.
            tags:
                - order
produces:
    - application/json
    - application/pdf
responses:
    PdfFile:
        description: Pdf file of check
        schema:
            $ref: '#/definitions/File'
    empty:
        description: Just empty responce body
        schema:
            type: object
    generatedIds:
        description: List of generated checks ids
        schema:
            $ref: '#/definitions/GeneratedChecksResponse'
    genericError:
        description: Generic server error
        schema:
            properties:
                Message:
                    description: The error message
                    example: Error loading file
                    type: string
            required:
                - Message
            type: object
    liveProbeSuccess:
        description: Generic server live probe message
        schema:
            $ref: '#/definitions/LiveProbeResponse'
    orderCreateResponse:
        description: List of created checks IDs
        schema:
            $ref: '#/definitions/OrderCreateResponse'
schemes:
    - http
swagger: "2.0"
